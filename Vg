import { ReactiveController, ReactiveControllerHost } from "lit";

// Define the interface for dependencies if needed
export interface IBaseController extends ReactiveController {
    host: ReactiveControllerHost | any;
    unsubscribes:any[];
    formValue:any;
    fieldState:any;
    isFormSubmitFailed:any;
    config:any;
    formController:any;
    meta:any;
    id:string;
    value:string;
    visible:boolean;
    conditionalProperties:string[];
    initialize(options:any):void;
    registerDependants():void;
    handleUnsubscribe():void;
}

export class BaseController implements IBaseController {
    host: ReactiveControllerHost | any;
    unsubscribes:any[] = [];
    formValue:any = {};
    fieldState:any = {};
    isFormSubmitFailed:any = null;
    config:any = null;
    formController:any = null;
    meta:any = {};
    id:string;
    conditionalProperties:string[] = ["visible"];

    get dependants() {
        return getDependants(this.config, this.conditionalProperties, this.config.property);
    }

    get submitfailed() {
        return this.fieldState.getState().submitFailed;
    }

    get value(): string {
        return this.fieldState?.value;
    }
}


â‰ˆ======

import { BaseController } from './path_to_your_controller';

describe('BaseController', () => {
    let controller: BaseController;

    beforeEach(() => {
        controller = new BaseController();
    });

    it('should initialize with default values', () => {
        expect(controller.unsubscribes).toEqual([]);
        expect(controller.formValue).toEqual({});
        expect(controller.fieldState).toEqual({});
        expect(controller.isFormSubmitFailed).toBeNull();
        expect(controller.config).toBeNull();
        expect(controller.formController).toBeNull();
        expect(controller.meta).toEqual({});
        expect(controller.conditionalProperties).toEqual(["visible"]);
    });

    it('should return the correct dependants', () => {
        const mockConfig = { property: 'testProperty' };
        const getDependantsMock = jest.fn();
        controller.config = mockConfig;

        // Mock the getDependants function
        global.getDependants = getDependantsMock;

        controller.dependants;

        // Verify that getDependants is called with the correct arguments
        expect(getDependantsMock).toHaveBeenCalledWith(
            controller.config,
            controller.conditionalProperties,
            controller.config.property
        );
    });

    it('should return the submitFailed value from fieldState', () => {
        const mockFieldState = { getState: jest.fn(() => ({ submitFailed: true })) };
        controller.fieldState = mockFieldState;

        expect(controller.submitfailed).toBe(true);
        expect(mockFieldState.getState).toHaveBeenCalled();
    });

    it('should return the correct value from fieldState', () => {
        controller.fieldState = { value: 'testValue' };

        expect(controller.value).toBe('testValue');
    });

    it('should return undefined when fieldState is not set', () => {
        controller.fieldState = null;

        expect(controller.value).toBeUndefined();
    });
});

=====

import { ReactiveController, ReactiveControllerHost } from 'lit';

export class BaseController implements ReactiveController {
  host: ReactiveControllerHost;
  fieldState: any = { value: '' };
  submitFailed: boolean = false;

  constructor(host: ReactiveControllerHost) {
    this.host = host;
    this.host.addController(this);
  }

  hostConnected() {
    // Simulate some initialization logic
    this.fieldState.value = 'Initial Value';
  }

  hostDisconnected() {
    // Simulate cleanup if needed
  }

  failSubmit() {
    this.submitFailed = true;
    this.host.requestUpdate(); // Trigger a render or update on the host
  }

  get value() {
    return this.fieldState?.value;
  }
}
====
import { ReactiveControllerHost } from 'lit';
import { expect } from '@open-wc/testing';
import { BaseController } from './BaseController'; // Adjust the path accordingly

class MockHost implements ReactiveControllerHost {
  private updateRequested = false;
  
  addController() {
    // Mock implementation of adding the controller
  }

  removeController() {
    // Mock implementation of removing the controller
  }

  requestUpdate() {
    // Simulate requestUpdate being called
    this.updateRequested = true;
  }

  wasUpdateRequested() {
    return this.updateRequested;
  }
}

describe('BaseController', () => {
  let host: MockHost;
  let controller: BaseController;

  beforeEach(() => {
    host = new MockHost();
    controller = new BaseController(host);
  });

  it('should initialize with default values', () => {
    expect(controller.fieldState).to.deep.equal({ value: '' });
    expect(controller.submitFailed).to.be.false;
  });

  it('should set value on hostConnected', () => {
    controller.hostConnected();
    expect(controller.value).to.equal('Initial Value');
  });

  it('should update submitFailed and trigger host update when failSubmit is called', () => {
    controller.failSubmit();
    expect(controller.submitFailed).to.be.true;
    expect(host.wasUpdateRequested()).to.be.true;
  });

  it('should get the correct value from fieldState', () => {
    controller.fieldState = { value: 'Test Value' };
    expect(controller.value).to.equal('Test Value');
  });

  it('should return undefined if fieldState is not set', () => {
    controller.fieldState = null;
    expect(controller.value).to.be.undefined;
  });
});

====

import { ReactiveControllerHost } from 'lit';
import { expect } from '@open-wc/testing';
import sinon from 'sinon';
import { BaseController } from './BaseController'; // Adjust the path accordingly

describe('BaseController (with sinon spies)', () => {
  let host: ReactiveControllerHost;
  let controller: BaseController;
  let requestUpdateSpy: sinon.SinonSpy;

  beforeEach(() => {
    // Create a mock host
    host = { addController() {}, removeController() {}, requestUpdate() {} };
    requestUpdateSpy = sinon.spy(host, 'requestUpdate');

    controller = new BaseController(host);
  });

  it('should call requestUpdate when failSubmit is triggered', () => {
    controller.failSubmit();
    expect(controller.submitFailed).to.be.true;
    expect(requestUpdateSpy.calledOnce).to.be.true;
  });

  it('should initialize with default values', () => {
    expect(controller.fieldState.value).to.equal('');
    expect(controller.submitFailed).to.be.false;
  });
});

=====
import { ControlController } from './ControlController';
import { ReactiveControllerHost } from 'lit';
import { isEmpty } from '@clmt/utils';

// Mocking the dependencies
jest.mock('@clmt/utils', () => ({
  isEmpty: jest.fn(),
}));

describe('ControlController', () => {
  let host: ReactiveControllerHost;
  let controlController: ControlController;

  beforeEach(() => {
    host = {
      addController: jest.fn(),
      removeController: jest.fn(),
    } as unknown as ReactiveControllerHost;
    
    controlController = new ControlController(host);
  });

  it('should initialize with the host and call addController', () => {
    expect(host.addController).toHaveBeenCalledWith(controlController);
  });

  describe('errorMessage', () => {
    it('should return error when form submission has failed', () => {
      controlController.fieldState = { error: 'Test error' };
      controlController.isFormSubmitFailed = true;

      expect(controlController.errorMessage).toBe('Test error');
    });

    it('should return null when there is no error or submission has not failed', () => {
      controlController.fieldState = { error: null };
      controlController.isFormSubmitFailed = false;

      expect(controlController.errorMessage).toBeNull();
    });
  });

  describe('customEvents', () => {
    it('should return config events if present', () => {
      controlController.config = { events: ['event1', 'event2'] };

      expect(controlController.customEvents).toEqual(['event1', 'event2']);
    });

    it('should return an empty array if config events are not present', () => {
      controlController.config = {};

      expect(controlController.customEvents).toEqual([]);
    });
  });

  describe('hostDisconnected', () => {
    it('should call handleUnsubscribe on hostDisconnected', () => {
      const handleUnsubscribeSpy = jest.spyOn(controlController, 'handleUnsubscribe');

      controlController.hostDisconnected();

      expect(handleUnsubscribeSpy).toHaveBeenCalled();
    });
  });

  describe('onValidate', () => {
    it('should return "This field is required" if the field is required and value is empty', () => {
      controlController.required = true;
      (isEmpty as jest.Mock).mockReturnValue(true);

      expect(controlController.onValidate('')).toBe('This field is required');
    });

    it('should return undefined if the field is not required or value is not empty', () => {
      controlController.required = false;
      (isEmpty as jest.Mock).mockReturnValue(false);

      expect(controlController.onValidate('some value')).toBeUndefined();
    });
  });
});

import { ControlController } from './ControlController';
import { ReactiveControllerHost } from 'lit';
import { isEmpty, isNotEmpty } from '@clmt/utils';

// Mocking the dependencies
jest.mock('@clmt/utils', () => ({
  isEmpty: jest.fn(),
  isNotEmpty: jest.fn(),
}));

describe('ControlController', () => {
  let host: ReactiveControllerHost;
  let controlController: ControlController;
  let formController: any;

  beforeEach(() => {
    formController = {
      register: jest.fn((id, callback, options) => {
        return callback; // Simulates the callback function execution
      }),
      getFormState: jest.fn(() => ({
        values: { field1: 'value1' },
      })),
    };

    host = {
      addController: jest.fn(),
      removeController: jest.fn(),
      requestUpdate: jest.fn(),
    } as unknown as ReactiveControllerHost;
    
    controlController = new ControlController(host);
    controlController.formController = formController; // Mock the formController dependency
  });

  it('should initialize with the host and call addController', () => {
    expect(host.addController).toHaveBeenCalledWith(controlController);
  });

  describe('initialize', () => {
    it('should register formController and call requestUpdate when ID is present', () => {
      controlController.id = 'testId';

      controlController.initialize({});

      expect(formController.register).toHaveBeenCalledWith(
        controlController.id,
        expect.any(Function),
        {
          value: true,
          valid: true,
          dirty: true,
          error: true,
          getValidator: expect.any(Function),
          validateFields: []
        }
      );
      expect(host.requestUpdate).toHaveBeenCalled();
    });

    it('should not register formController when ID is not present', () => {
      controlController.id = null;

      controlController.initialize({});

      expect(formController.register).not.toHaveBeenCalled();
    });
  });

  describe('registerDependants', () => {
    it('should register dependants and update formValue correctly', () => {
      controlController.dependants = ['dep1', 'dep2'];

      controlController.registerDependants();

      expect(formController.register).toHaveBeenCalledTimes(2);
      expect(formController.getFormState).toHaveBeenCalledTimes(2);
      expect(host.requestUpdate).toHaveBeenCalledTimes(2);
    });

    it('should call fieldState.change(null) when the field is not visible and has a value', () => {
      const fieldStateChangeMock = jest.fn();
      controlController.fieldState = { change: fieldStateChangeMock };
      controlController.visible = false;
      controlController.value = 'test value';
      (isNotEmpty as jest.Mock).mockReturnValue(true);

      controlController.dependants = ['dep1'];

      controlController.registerDependants();

      expect(fieldStateChangeMock).toHaveBeenCalledWith(null);
    });
  });

  describe('errorMessage', () => {
    it('should return error when form submission has failed', () => {
      controlController.fieldState = { error: 'Test error' };
      controlController.isFormSubmitFailed = true;

      expect(controlController.errorMessage).toBe('Test error');
    });

    it('should return null when there is no error or submission has not failed', () => {
      controlController.fieldState = { error: null };
      controlController.isFormSubmitFailed = false;

      expect(controlController.errorMessage).toBeNull();
    });
  });

  describe('customEvents', () => {
    it('should return config events if present', () => {
      controlController.config = { events: ['event1', 'event2'] };

      expect(controlController.customEvents).toEqual(['event1', 'event2']);
    });

    it('should return an empty array if config events are not present', () => {
      controlController.config = {};

      expect(controlController.customEvents).toEqual([]);
    });
  });

  describe('hostDisconnected', () => {
    it('should call handleUnsubscribe on hostDisconnected', () => {
      const handleUnsubscribeSpy = jest.spyOn(controlController, 'handleUnsubscribe');

      controlController.hostDisconnected();

      expect(handleUnsubscribeSpy).toHaveBeenCalled();
    });
  });

  describe('onValidate', () => {
    it('should return "This field is required" if the field is required and value is empty', () => {
      controlController.required = true;
      (isEmpty as jest.Mock).mockReturnValue(true);

      expect(controlController.onValidate('')).toBe('This field is required');
    });

    it('should return undefined if the field is not required or value is not empty', () => {
      controlController.required = false;
      (isEmpty as jest.Mock).mockReturnValue(false);

      expect(controlController.onValidate('some value')).toBeUndefined();
    });
  });
});

==
describe('ControlController additional methods', () => {
  describe('formStateChangeListener', () => {
    beforeEach(() => {
      controlController.formController = {
        subscribe: jest.fn((callback) => {
          callback({ submitFailed: true });
          return { unsubscribe: jest.fn() };
        }),
      };
      controlController.host = { requestUpdate: jest.fn() };
      controlController.isFormSubmitFailed = false;
    });

    it('should update isFormSubmitFailed and call host.requestUpdate when submitFailed changes', () => {
      controlController.formStateChangeListener();
      expect(controlController.isFormSubmitFailed).toBe(true);
      expect(controlController.host.requestUpdate).toHaveBeenCalled();
    });

    it('should not call host.requestUpdate if submitFailed state is unchanged', () => {
      controlController.isFormSubmitFailed = true;
      controlController.formStateChangeListener();
      expect(controlController.host.requestUpdate).not.toHaveBeenCalled();
    });
  });

  describe('hostDisconnected', () => {
    it('should call handleUnsubscribe', () => {
      const handleUnsubscribeSpy = jest.spyOn(controlController, 'handleUnsubscribe');
      controlController.hostDisconnected();
      expect(handleUnsubscribeSpy).toHaveBeenCalled();
    });
  });

  describe('change', () => {
    it('should call fieldState.change with the event detail when fieldState is defined', () => {
      controlController.fieldState = { change: jest.fn() };
      const event = { detail: 'new value' };
      controlController.change(event);
      expect(controlController.fieldState.change).toHaveBeenCalledWith(event.detail);
    });

    it('should do nothing if fieldState is not defined', () => {
      controlController.fieldState = undefined;
      const event = { detail: 'new value' };
      controlController.change(event);
      expect(controlController.fieldState?.change).toBeUndefined();
    });
  });
});
