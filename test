
function buildGraphQLQuery({ 
    type = 'query', 
    operationName, 
    fields, 
    variables = {}, 
    arguments = {}
}) {
    // Convert variables and arguments objects to string
    const varsString = Object.keys(variables).map(key => `$${key}: ${variables[key]}`).join(', ');
    const argsString = Object.keys(arguments).map(key => `${key}: $${key}`).join(', ');

    // Build the fields selection string
    const fieldsString = fields.map(field => 
        typeof field === 'string' ? field : `${field.name} { ${field.subfields.join(' ')} }`
    ).join(' ');

    // Combine everything into the final query string
    return `
        ${type} ${operationName ? `${operationName} ` : ''} ${varsString ? `(${varsString})` : ''} {
            ${operationName ? operationName : ''} ${argsString ? `(${argsString})` : ''} {
                ${fieldsString}
            }
        }
    `.trim();
}

// Example usage:
const query = buildGraphQLQuery({
    type: 'query',
    operationName: 'getUser',
    fields: [
        'id',
        'name',
        { name: 'address', subfields: ['city', 'country'] },
    ],
    variables: {
        id: 'ID!',
    },
    arguments: {
        id: 'id',
    }
});

console.log(query);


import { html, fixture, expect } from '@open-wc/testing';
import './table-component.js';

describe('TableComponent', () => {
  it('renders empty table when no data is provided', async () => {
    const el = await fixture(html`<table-component></table-component>`);
    expect(el.shadowRoot.querySelector('table')).to.exist;
    expect(el.shadowRoot.querySelector('tbody').children.length).to.equal(0);
  });

  it('renders table with columns and data correctly', async () => {
    const columns = [{ header: 'Name', field: 'name' }, { header: 'Age', field: 'age' }];
    const data = [{ name: 'Alice', age: 30 }, { name: 'Bob', age: 25 }];

    const el = await fixture(html`
      <table-component .columns=${columns} .data=${data}></table-component>
    `);

    expect(el.shadowRoot.querySelector('table')).to.exist;
    const rows = el.shadowRoot.querySelectorAll('tbody tr');
    expect(rows.length).to.equal(2);
    expect(rows[0].querySelector('td').textContent).to.equal('Alice');
    expect(rows[1].querySelector('td').textContent).to.equal('25'); // Assuming 'age' field
  });
});
