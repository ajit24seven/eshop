import { ReactiveController, ReactiveControllerHost } from 'lit';
import axiosInstance from './axiosWrapper.js';
import { Task } from 'lit';

export class ApiController extends ReactiveController {
  constructor(host, url) {
    super(host);
    this.host = host;
    this.url = url;
    this.abortController = new AbortController();

    this.task = new Task(
      async () => {
        try {
          const response = await axiosInstance.get(this.url, { signal: this.abortController.signal });
          return response.data;
        } catch (error) {
          if (axiosInstance.isCancel(error)) {
            // Request was canceled
            return Promise.reject(new Error('Request canceled'));
          }
          throw error;
        }
      }
    );

    this.host.addController(this);
  }

  get data() {
    return this.task.value;
  }

  get error() {
    return this.task.error;
  }

  get state() {
    return this.task.state;
  }

  hostConnected() {
    this.task.run();
  }

  hostDisconnected() {
    this.abortController.abort();
  }
}
