import { LitElement, html, css } from 'lit-element';

class TableComponent extends LitElement {
  static get properties() {
    return {
      columns: { type: Array },  // Array of column definitions
      data: { type: Array }      // Array of row data
    };
  }

  static get styles() {
    return css`
      table {
        width: 100%;
        border-collapse: collapse;
      }
      th, td {
        border: 1px solid black;
        padding: 8px;
        text-align: left;
      }
      th {
        background-color: #f2f2f2;
      }
    `;
  }

  constructor() {
    super();
    this.columns = [];
    this.data = [];
  }

  // Manipulate column JSON based on row data before rendering
  firstUpdated() {
    if (this.data.length > 0) {
      const firstRow = this.data[0];
      this.columns = Object.keys(firstRow).map(key => ({
        header: key.toUpperCase(),
        field: key
      }));
    }
  }

  renderTableHeader() {
    return html`
      <tr>
        ${this.columns.map(column => html`<th>${column.header}</th>`)}
      </tr>
    `;
  }

  renderTableRow(row) {
    return html`
      <tr>
        ${this.columns.map(column => html`<td>${row[column.field]}</td>`)}
      </tr>
    `;
  }

  render() {
    return html`
      <table>
        <thead>${this.renderTableHeader()}</thead>
        <tbody>
          ${this.data.map(row => this.renderTableRow(row))}
        </tbody>
      </table>
    `;
  }
}

customElements.define('table-component', TableComponent);
export { TableComponent };
