
import { LitElement, html, css } from 'lit';
import { customElement, state } from 'lit/decorators.js';
import { IEntitiyInfoList } from './entity-information.config';

@customElement('kyx-entity-information')
export class EntityInformation extends LitElement {
  
  @state()
  private entityInfoList: IEntitiyInfoList[] = [];

  @state()
  private entityInfoListData: IEntitiyInfoList[] = [];

  static styles = css`
    /* Add your custom styles or import CSS modules here */
    /* Example:
    :host {
      display: block;
      padding: 16px;
    }
    */
  `;

  // Lifecycle method that runs after the first render
  firstUpdated() {
    this.initializeEntityInfo();
  }

  // Method to initialize or update the entity information list
  private initializeEntityInfo() {
    // Simulate an API call or some logic to populate the list
    const initialData: IEntitiyInfoList[] = [
      { header: 'Header1', property: 'Value1', col: 4 },
      { header: 'Header2', property: 'Value2', col: 4 },
    ];

    this.entityInfoList = initialData;
    this.entityInfoListData = [...this.entityInfoList]; // Spread syntax ensures a new reference
  }

  // Method to render the page title
  private renderPageTitle(title: string) {
    return html`<h1>${title}</h1>`;
  }

  // Method to display the entity list
  private displayEntityList() {
    return this.entityInfoList.map(item => html`
      <sc-grid-column md="${item.col}">
        ${this.renderEntityItem(item.header, item.property)}
      </sc-grid-column>
    `);
  }

  // Method to render individual entity items
  private renderEntityItem(header: string, property: string) {
    return html`
      <div>
        <strong>${header}:</strong> ${property}
      </div>
    `;
  }

  // The render method that returns the component's template
  render() {
    return html`
      <sc-grid-container fluid>
        <div>${this.renderPageTitle('Entity Information')}</div>
        <sc-grid-row>
          ${this.displayEntityList()}
        </sc-grid-row>
      </sc-grid-container>
    `;
  }
}

import { html, fixture, expect } from '@open-wc/testing';
import './entity-information';
import { EntityInformation } from './entity-information';
import { IEntitiyInfoList } from './entity-information.config'; // Assuming this is where the interface is defined

describe('EntityInformation Component', () => {

  let element: EntityInformation;

  beforeEach(async () => {
    element = await fixture<EntityInformation>(html`<kyx-entity-information></kyx-entity-information>`);
  });

  it('should initialize with empty entityInfoList', () => {
    expect(element.entityInfoList).to.be.an('array').that.is.empty;
  });

  it('should render the page title correctly', () => {
    const titleElement = element.shadowRoot!.querySelector('div');
    expect(titleElement!.textContent).to.equal('Entity Information');
  });

  it('should correctly map entityInfoList to displayEntityList', async () => {
    const mockEntityInfoList: IEntitiyInfoList[] = [
      { header: 'Header1', property: 'Value1', col: 4 },
      { header: 'Header2', property: 'Value2', col: 4 }
    ];

    element.entityInfoList = mockEntityInfoList;
    await element.updateComplete;  // Wait for the update cycle to complete

    const gridColumns = element.shadowRoot!.querySelectorAll('sc-grid-column');
    expect(gridColumns.length).to.equal(2);
    expect(gridColumns[0].textContent).to.contain('Header1');
    expect(gridColumns[1].textContent).to.contain('Header2');
  });

  it('should update entityInfoListData when entityInfoList is changed', async () => {
    const mockEntityInfoList: IEntitiyInfoList[] = [
      { header: 'Header1', property: 'Value1', col: 4 },
      { header: 'Header2', property: 'Value2', col: 4 }
    ];

    element.entityInfoList = mockEntityInfoList;
    await element.updateComplete;

    expect(element.entityInfoListData).to.deep.equal(mockEntityInfoList);
  });

});
import { html, fixture, expect } from '@open-wc/testing';
import './entity-information.js'; // Import the component

describe('EntityInformation Component', () => {
  it('renders the correct title', async () => {
    const el = await fixture(html`<kyx-entity-information></kyx-entity-information>`);
    const title = el.shadowRoot.querySelector('.pageTitle');
    expect(title).to.exist;
    expect(title.textContent).to.equal('Entity Information');
  });

  it('renders the correct number of entity columns', async () => {
    const el = await fixture(html`<kyx-entity-information></kyx-entity-information>`);
    const columns = el.shadowRoot.querySelectorAll('sc-grid-column');
    expect(columns.length).to.equal(3); // Assuming you have 3 static entities in your data
  });

  it('renders the correct headers and properties', async () => {
    const el = await fixture(html`<kyx-entity-information></kyx-entity-information>`);
    const columns = el.shadowRoot.querySelectorAll('sc-grid-column');

    expect(columns[0].textContent).to.contain('Entity 1');
    expect(columns[1].textContent).to.contain('Entity 2');
    expect(columns[2].textContent).to.contain('Entity 3');

    // Additional checks can be added if the properties are displayed as well
  });
});

import { fixture, html, expect } from '@open-wc/testing';
import './entity-information.ts'; // Adjust this import to the actual path of your component

interface IEntityInfo {
  header: string;
  property: string;
  col?: number;
}

interface IEntityInfoData {
  [key: string]: any;
}

describe('EntityInformation', () => {
  let element: HTMLElement;
  let entityInfoList: IEntityInfo[];
  let entityInfoListData: IEntityInfoData;

  beforeEach(async () => {
    // Mocking the necessary data
    entityInfoList = [
      { header: 'Name', property: 'name', col: 4 },
      { header: 'Age', property: 'age', col: 4 },
    ];

    entityInfoListData = {
      name: 'John Doe',
      age: 30,
    };

    globalThis.entityInfoList = entityInfoList;
    globalThis.entityInfoListData = entityInfoListData;

    element = await fixture(html`<kyx-entity-information></kyx-entity-information>`);
  });

  it('renders correctly', () => {
    const gridContainer = element.shadowRoot?.querySelector('sc-grid-container');
    expect(gridContainer).to.exist;

    const gridRow = gridContainer?.querySelector('sc-grid-row');
    expect(gridRow).to.exist;

    const columns = gridRow?.querySelectorAll('sc-grid-column');
    expect(columns?.length).to.equal(entityInfoList.length);

    columns?.forEach((column, index) => {
      const expectedText = `${entityInfoList[index].header} ${entityInfoListData[entityInfoList[index].property]}`;
      expect(column.textContent?.trim()).to.equal(expectedText);
    });
  });

  it('renders correctly with empty data', async () => {
    entityInfoList = [];
    entityInfoListData = {};

    globalThis.entityInfoList = entityInfoList;
    globalThis.entityInfoListData = entityInfoListData;

    element = await fixture(html`<kyx-entity-information></kyx-entity-information>`);

    const gridRow = element.shadowRoot?.querySelector('sc-grid-row');
    expect(gridRow).to.exist;

    const columns = gridRow?.querySelectorAll('sc-grid-column');
    expect(columns?.length).to.equal(0); // Expect no columns to be rendered
  });

  it('handles missing data properties gracefully', async () => {
    entityInfoList = [
      { header: 'Name', property: 'name', col: 4 },
      { header: 'Occupation', property: 'occupation', col: 4 },
    ];

    entityInfoListData = {
      name: 'John Doe',
    };

    globalThis.entityInfoList = entityInfoList;
    globalThis.entityInfoListData = entityInfoListData;

    element = await fixture(html`<kyx-entity-information></kyx-entity-information>`);

    const gridRow = element.shadowRoot?.querySelector('sc-grid-row');
    expect(gridRow).to.exist;

    const columns = gridRow?.querySelectorAll('sc-grid-column');
    expect(columns?.length).to.equal(entityInfoList.length);

    columns?.forEach((column, index) => {
      const dataProperty = entityInfoList[index].property;
      const expectedText = `${entityInfoList[index].header} ${entityInfoListData[dataProperty] || ''}`;
      expect(column.textContent?.trim()).to.equal(expectedText);
    });
  });
});

import { fixture, html } from '@open-wc/testing';
import './entity-information.js'; // Adjust this import to the actual path of your component

describe('EntityInformation', () => {
  let element;

  beforeEach(async () => {
    // Mocking the necessary data
    global.entityInfoList = [
      { header: 'Name', property: 'name', col: 4 },
      { header: 'Age', property: 'age', col: 4 },
    ];

    global.entityInfoListData = {
      name: 'John Doe',
      age: 30,
    };

    element = await fixture(html`<kyx-entity-information></kyx-entity-information>`);
  });

  it('renders correctly', () => {
    const gridContainer = element.shadowRoot.querySelector('sc-grid-container');
    expect(gridContainer).to.exist;

    const gridRow = gridContainer.querySelector('sc-grid-row');
    expect(gridRow).to.exist;

    const columns = gridRow.querySelectorAll('sc-grid-column');
    expect(columns.length).to.equal(global.entityInfoList.length);

    columns.forEach((column, index) => {
      const expectedText = `${global.entityInfoList[index].header} ${global.entityInfoListData[global.entityInfoList[index].property]}`;
      expect(column.textContent.trim()).to.equal(expectedText);
    });
  });
});

import { ReactiveController, ReactiveControllerHost } from 'lit';
import axiosInstance from './axiosWrapper.js';
import { Task } from 'lit';

export class ApiController extends ReactiveController {
  constructor(host, url) {
    super(host);
    this.host = host;
    this.url = url;
    this.abortController = new AbortController();

    this.task = new Task(
      async () => {
        try {
          const response = await axiosInstance.get(this.url, { signal: this.abortController.signal });
          return response.data;
        } catch (error) {
          if (axiosInstance.isCancel(error)) {
            // Request was canceled
            return Promise.reject(new Error('Request canceled'));
          }
          throw error;
        }
      }
    );

    this.host.addController(this);
  }

  get data() {
    return this.task.value;
  }

  get error() {
    return this.task.error;
  }

  get state() {
    return this.task.state;
  }

  hostConnected() {
    this.task.run();
  }

  hostDisconnected() {
    this.abortController.abort();
  }
}


====

import axios from 'axios';

// Create an instance of axios with default configuration
const axiosInstance = axios.create({
  baseURL: 'https://api.example.com', // Set your base URL here
  timeout: 10000, // Set a timeout if needed
});

// Request interceptor to handle any global request settings
axiosInstance.interceptors.request.use(
  config => {
    // Add any request configuration here (e.g., authentication tokens)
    return config;
  },
  error => {
    // Handle request errors
    return Promise.reject(error);
  }
);

// Response interceptor to handle global response settings
axiosInstance.interceptors.response.use(
  response => response,
  error => {
    // Handle response errors
    if (axios.isCancel(error)) {
      return Promise.reject(new Error('Request canceled'));
    }
    return Promise.reject(error);
  }
);

// Export the axios instance for use in other modules
export default axiosInstance;
========

import { LitElement, html, css, property } from 'lit';
import { ApiController } from './ApiController.js';

export class DataFetcher extends LitElement {
  @property({ type: String }) url = '';
  @property({ type: Function }) renderItem = () => html``; // Default render function

  constructor() {
    super();
    this.apiController = null;
  }

  updated(changedProperties) {
    super.updated(changedProperties);
    if (changedProperties.has('url')) {
      this.apiController = new ApiController(this, this.url);
    }
  }

  render() {
    if (!this.apiController) {
      return html`<p>Please provide a URL.</p>`;
    }

    const { data, error, state } = this.apiController;

    if (state === 'pending') {
      return html`<p>Loading...</p>`;
    }

    if (state === 'rejected') {
      return html`<p>Error: ${error.message}</p>`;
    }

    return this.renderItem(data);
  }
}

customElements.define('data-fetcher', DataFetcher);

========

import axios from 'axios';
import axiosInstance from './axiosWrapper.js';

// Mock axios
jest.mock('axios');

describe('Axios Wrapper', () => {
  test('should create axios instance with default configuration', () => {
    expect(axiosInstance.defaults.baseURL).toBe('https://api.example.com');
    expect(axiosInstance.defaults.timeout).toBe(1000);
  });

  test('should handle request interceptor', async () => {
    const mockRequest = jest.fn(config => config);
    axiosInstance.interceptors.request.use = mockRequest;

    // Simulate an API call
    await axiosInstance.get('/test-endpoint');

    expect(mockRequest).toHaveBeenCalled();
  });

  test('should handle response interceptor', async () => {
    const mockResponse = { data: 'response data' };
    axiosInstance.interceptors.response.use = jest.fn(response => response);

    axios.get.mockResolvedValue(mockResponse);

    const response = await axiosInstance.get('/test-endpoint');

    expect(response).toEqual(mockResponse);
  });

  test('should handle request cancellation', async () => {
    const mockCancel = new axios.Cancel('Request canceled');
    axiosInstance.isCancel = jest.fn(error => error.message === 'Request canceled');

    const error = new axios.Cancel('Request canceled');
    
    expect(axiosInstance.isCancel(error)).toBe(true);
  });

  test('should handle errors properly', async () => {
    const mockError = new Error('Network Error');
    axios.get.mockRejectedValue(mockError);

    await expect(axiosInstance.get('/test-endpoint')).rejects.toThrow('Network Error');
  });
});

===========
import { html, LitElement } from 'lit';
import { fixture, html as litHtml } from '@open-wc/testing';
import './DataFetcher.js'; // Ensure the path is correct

class MockApiController extends LitElement {
  constructor() {
    super();
    this.url = '';
    this.data = [];
    this.state = 'idle';
  }

  async run() {
    this.state = 'pending';
    // Simulate data fetching
    setTimeout(() => {
      this.data = [{ name: 'Item 1' }];
      this.state = 'fulfilled';
      this.requestUpdate();
    }, 100);
  }
}

customElements.define('mock-api-controller', MockApiController);

describe('DataFetcher', () => {
  test('should render loading state', async () => {
    const el = await fixture(html`<data-fetcher 
      url="/test-url"
      .renderItem=${data => litHtml`<div>${data.map(item => html`<p>${item.name}</p>`)}</div>`}
    ></data-fetcher>`);

    // Set up a mock controller to simulate loading
    const mockController = el.apiController;
    mockController.state = 'pending';
    await el.updateComplete;

    expect(el.shadowRoot.querySelector('p').textContent).toBe('Loading...');
  });

  test('should render data', async () => {
    const el = await fixture(html`<data-fetcher 
      url="/test-url"
      .renderItem=${data => litHtml`<div>${data.map(item => html`<p>${item.name}</p>`)}</div>`}
    ></data-fetcher>`);

    // Set up a mock controller to simulate data fetching
    const mockController = el.apiController;
    mockController.state = 'fulfilled';
    mockController.data = [{ name: 'Item 1' }];
    await el.updateComplete;

    expect(el.shadowRoot.querySelector('p').textContent).toBe('Item 1');
  });

  test('should render error state', async () => {
    const el = await fixture(html`<data-fetcher 
      url="/test-url"
      .renderItem=${data => litHtml`<div>${data.map(item => html`<p>${item.name}</p>`)}</div>`}
    ></data-fetcher>`);

    // Set up a mock controller to simulate an error
    const mockController = el.apiController;
    mockController.state = 'rejected';
    mockController.error = new Error('Network Error');
    await el.updateComplete;

    expect(el.shadowRoot.querySelector('p').textContent).toBe('Error: Network Error');
  });
});
==========
import { ApiController } from './ApiController.js';
import axios from 'axios';
import { Task } from 'lit';
import { mock } from 'jest-mock-extended';

// Mock axios
jest.mock('axios');

describe('ApiController', () => {
  let apiController;
  const url = '/test-url';
  const host = mock();

  beforeEach(() => {
    apiController = new ApiController(host, url);
  });

  test('should initialize with correct URL', () => {
    expect(apiController.url).toBe(url);
  });

  test('should handle successful data fetch', async () => {
    const mockData = { data: [{ name: 'Item 1' }] };
    axios.get.mockResolvedValue(mockData);

    await apiController.task.run();

    expect(apiController.data).toEqual(mockData.data);
    expect(apiController.state).toBe('fulfilled');
  });

  test('should handle failed data fetch', async () => {
    const mockError = new Error('Network Error');
    axios.get.mockRejectedValue(mockError);

    await expect(apiController.task.run()).rejects.toThrow(mockError);
    expect(apiController.state).toBe('rejected');
    expect(apiController.error).toEqual(mockError);
  });

  test('should handle request cancellation', async () => {
    axios.get.mockImplementation(() => {
      throw axios.Cancel('Request canceled');
    });

    await expect(apiController.task.run()).rejects.toThrow('Request canceled');
    expect(apiController.state).toBe('rejected');
  });
});

====
import { describe, it, expect, vi } from 'vitest';
import axios from 'axios';
import { ApiController } from './ApiController.js';
import { Task } from 'lit';

// Mock axios
vi.mock('axios');

// Create a mock host
const mockHost = {
  addController: vi.fn(),
  removeController: vi.fn(),
};

describe('ApiController', () => {
  it('should initialize with the correct URL', () => {
    const url = '/test-url';
    const apiController = new ApiController(mockHost, url);
    expect(apiController.url).toBe(url);
  });

  it('should handle successful data fetch', async () => {
    const url = '/test-url';
    const mockData = { data: [{ name: 'Item 1' }] };
    axios.get.mockResolvedValue(mockData);

    const apiController = new ApiController(mockHost, url);
    await apiController.task.run();

    expect(apiController.data).toEqual(mockData.data);
    expect(apiController.state).toBe('fulfilled');
  });

  it('should handle failed data fetch', async () => {
    const url = '/test-url';
    const mockError = new Error('Network Error');
    axios.get.mockRejectedValue(mockError);

    const apiController = new ApiController(mockHost, url);
    await expect(apiController.task.run()).rejects.toThrow(mockError);
    expect(apiController.state).toBe('rejected');
    expect(apiController.error).toEqual(mockError);
  });

  it('should handle request cancellation', async () => {
    const url = '/test-url';
    axios.get.mockImplementation(() => {
      throw axios.Cancel('Request canceled');
    });

    const apiController = new ApiController(mockHost, url);
    await expect(apiController.task.run()).rejects.toThrow('Request canceled');
    expect(apiController.state).toBe('rejected');
  });

  it('should call abortController.abort on disconnection', () => {
    const url = '/test-url';
    const apiController = new ApiController(mockHost, url);

    apiController.hostDisconnected();

    // Check if abortController.abort was called
    expect(apiController.abortController.abort).toHaveBeenCalled();
  });
});
===
import { describe, it, expect, vi } from 'vitest';
import axios from 'axios';
import axiosInstance from './axiosWrapper.js';

// Mock axios
vi.mock('axios');

describe('Axios Wrapper', () => {
  it('should create axios instance with default configuration', () => {
    expect(axiosInstance.defaults.baseURL).toBe('https://api.example.com');
    expect(axiosInstance.defaults.timeout).toBe(1000);
  });

  it('should handle request interceptor', async () => {
    const mockRequest = vi.fn(config => config);
    axiosInstance.interceptors.request.use = mockRequest;

    // Simulate an API call
    await axiosInstance.get('/test-endpoint');

    expect(mockRequest).toHaveBeenCalled();
  });

  it('should handle response interceptor', async () => {
    const mockResponse = { data: 'response data' };
    axiosInstance.interceptors.response.use = vi.fn(response => response);

    axios.get.mockResolvedValue(mockResponse);

    const response = await axiosInstance.get('/test-endpoint');

    expect(response).toEqual(mockResponse);
  });

  it('should handle request cancellation', async () => {
    const mockCancel = new axios.Cancel('Request canceled');
    axiosInstance.isCancel = vi.fn(error => error.message === 'Request canceled');

    const error = new axios.Cancel('Request canceled');
    
    expect(axiosInstance.isCancel(error)).toBe(true);
  });

  it('should handle errors properly', async () => {
    const mockError = new Error('Network Error');
    axios.get.mockRejectedValue(mockError);

    await expect(axiosInstance.get('/test-endpoint')).rejects.toThrow('Network Error');
  });
});
