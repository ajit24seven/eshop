import { html, css } from 'lit';
import {
    riskFactorConfig,
    screeningEntityColumns,
    screeningHitdetailsColumns,
    screeningWatchlistColumns,
} from './config';
import ScGridStyle from '@scdevkit/webkit/styles/ScGridStyle.js';
import '../components/loader/loader.component';
import '../components/table';
import { DISPLAY_TYPE } from '../constants/common';
import { formatDate } from '../utils/commonUtils';
import GraphQLController from '../controllers/graphql-controller/graphql-controller';
import PageBase from '../shared/PageBase';
import {
    ENTITY_WATCHLIST_HITDETAILS_QUERY,
    SCREENING_DETAILS_QUERY,
} from '../constants/graphQL';

export class NameScreening extends PageBase {
    static styles = [
        css`
            ${ScGridStyle}
            .break-space {
                white-space: pre-wrap;
            }
        `,
    ];

    static properties = {
        openSideNav: {},
        openAssessment: {},
        openHitDetails: {},
        openEditForm: {},
        selectedRow: {},
        selectedHitDetailsRow: {},
    };

    constructor() {
        super();
        this.openSideNav = true;
        this.openAssessment = false;
        this.openHitDetails = false;
        this.openEditForm = false;
        this.selectedRow = {};
        this.selectedHitDetailsRow = {};
        this.gnsCont = new GraphQLController(this, SCREENING_DETAILS_QUERY);
        this.gqlModalCont = new GraphQLController(
            this,
            ENTITY_WATCHLIST_HITDETAILS_QUERY
        );
    }

    renderScreeningPopup = () => {
        return this.gqlModalCont.render({
            complete: (data) => {
                return html`
                    ${this.renderScreeningEntity(data.screeningEntity)}
                    ${this.renderScreeningWatchlist(data.screeningWatchlist)}
                    ${this.renderScreeningHitdetails(data.screeningHitdetails)}
                `;
            },
        });
    };
}

dataViewFormatter = (data, config) => {
    return config.map(({ label, key }) => ({
        field: {
            value: label,
        },
        value: {
            value: data[key] || '-',
        },
    }));
};

tableDataFormatter = (data, arrKey) => {
    data.reduce((formatted, { [arrKey]: arrayData, ...rest }) => {
        const data = arrayData.map(arrData => {
            return { ...rest, ...arrData };
        });
        formatted.push(...data);
        return formatted;
    }, []);
    return formatted;
};

actionHandler = ({ detail }) => {
    const { rowData, actionName } = detail;
    if (actionName === 'cellClicked') {
        const { selectedData } = rowData;
        this.gglModalCont.run();
        this.selectedRow = selectedData[0].data;
        this.openEditForm = true;
    }
    console.log(rowData, actionName);
};


getFilteredData = (data, value) => {
    return data.filter(({ tab }) => tab === value);
};

renderScreeningHitdetails = data => {
    const { hitData } = data;
    const sDataLength = this.getFilteredData(hitData, 'Sanctions').length;
    const pDataLength = this.getFilteredData(hitData, 'Politically Exposed Person').length;
    const aDataLength = this.getFilteredData(hitData, 'Adverse Media').length;
    return html`
        <sc-tab-group class="sc-tabs mx-2">
            <sc-tab
                slot="nav"
                panel="tab1"
                active=""
                ?disabled=${sDataLength === 0}>
                <span class="me-1">Sanctions</span>
                ${sDataLength
                    ? html`
                        <sc-badge
                            type="number"
                            color="red"
                            number=${sDataLength}
                            label="">
                        </sc-badge>`
                    : null}
            </sc-tab>
            <sc-tab
                slot="nav"
                panel="tab2"
                ?disabled=${pDataLength === 0}>
                <span class="me-1">Politically Exposed Person</span>
                ${pDataLength
                    ? html`
                        <sc-badge
                            type="number"
                            color="red"
                            number=${pDataLength}
                            label="">
                        </sc-badge>`
                    : null}
            </sc-tab>
            <sc-tab
                slot="nav"
                panel="tab3"
                ?disabled=${aDataLength === 0}>
                <span class="me-1">Adverse Media</span>
                ${aDataLength
                    ? html`
                        <sc-badge
                            type="number"
                            color="red"
                            number=${aDataLength}
                            label="">
                        </sc-badge>`
                    : null}
            </sc-tab>
        </sc-tab-group>
        <sc-tab-panel name="tab1" class="border-top">
            <clmt-table
                .columnsConfig=${screeningHitdetailsColumns}
                .data=${this.getFilteredData(hitData, 'Sanctions')}
                @actionHandler=${this.actionHitDetailHandler}>
            </clmt-table>
        </sc-tab-panel>
        <sc-tab-panel name="tab2" class="border-top">
            <clmt-table
                .columnsConfig=${screeningHitdetailsColumns}
                .data=${this.getFilteredData(hitData, 'Politically Exposed Person')}
                @actionHandler=${this.actionHitDetailHandler}>
            </clmt-table>
        </sc-tab-panel>
        <sc-tab-panel name="tab3" class="border-top">
            <clmt-table
                .columnsConfig=${screeningHitdetailsColumns}
                .data=${this.getFilteredData(hitData, 'Adverse Media')}
                @actionHandler=${this.actionHitDetailHandler}>
            </clmt-table>
        </sc-tab-panel>
    `;
};
renderScreeningEntity = (data) => {
    const { data: entityData } = data;
    return html`<sc-grid-container fluid style="margin-top: -30px">
        <sc-grid-row>
            ${screeningEntityColumns.map(({ property, header, displayType }) => {
                const val =
                    displayType === DISPLAY_TYPE.DATE
                        ? formatDate(entityData[0][property])
                        : entityData[0][property];
                return html`<sc-grid-column col-6 xxl="3" class="my-2">
                    <sc-label
                        label=${header}
                        label-size="xxs"
                        tooltip=""
                        tooltip-placement="top"
                    ></sc-label>
                    <div style="margin-top: -6px">${val || '-'}</div>
                </sc-grid-column>`;
            })}
        </sc-grid-row>
    </sc-grid-container>`;
};

renderScreeningWatchlist = (data) => {
    const { data: watchlistData } = data;
    return html`
        <clmt-table
            .columnsConfig=${screeningWatchlistColumns}
            .data=${watchlistData}
        ></clmt-table>
    `;
};

render() {
    return html`<div>
        <div>${this.pageTitle('Name Screening')}</div>
        <div slot="body">${this.renderTable()}</div>
    </div>`;
}

<sc-modal
    id="scAssessmentModal"
    size="lg"
    ?open=${this.openEditForm}
    @sc-hide=${() => {
        this.openEditForm = false;
        this.openAssessment = true;
    }}
>
    <div slot="header">
        <div>
            <strong>${this.selectedRow.name}</strong>
        </div>
    </div>
    ${this.renderScreeningPopup()}
    <div slot="footer" class="d-flex">
        <sc-button
            icon="save_line"
            icon-position="left"
            class="ms-1"
            @click=${() => {
                this.unsaved = false;
            }}
            fill
            ?disabled=${false}
        >Save</sc-button>
        <sc-button
            icon="download"
            icon-position="left"
            fill
            ?disabled=${false}
            class="ms-1"
        >Export</sc-button>
    </div>
</sc-modal>
render() {
  return html`<div>
    <div>${this.pageTitle('Name Screening')}</div>
    <div slot="body">${this.renderTable()}</div>
  </div>`

  <sc-modal
    id="scAssessmentModal"
    size="lg"
    ?open=${this.openEditForm}
    @sc-hide=${() => {
      this.openEditForm = false;
      this.openAssessment = true;
    }}
  >
    <div slot="header">
      <div>
        <strong>${this.selectedRow.name}</strong>
      </div>
    </div>
    ${this.renderScreeningPopup()}
    <div slot="footer" class="d-flex">
      <sc-button
        icon="save-line"
        icon-position="left"
        class="ms-1"
        @click=${() => {
          this.unsaved = false;
        }}
        fill
        ?disabled=${false}
      >Save</sc-button>
      <sc-button
        icon="download"
        icon-position="left"
        fill
        ?disabled=${false}
        class="ms-1"
      >Export</sc-button>
      <sc-button
        class="ms-auto"
        @click=${() => {
          this.openEditForm = false;
          this.openAssessment = true;
        }}
      >Cancel</sc-button>
    </div>
  </sc-modal>

  <sc-modal
    id="scHitDetailsModal"
    size="md"
    ?open=${this.openHitDetails}
    @sc-hide=${() => {
      this.openHitDetails = false;
      this.openEditForm = true;
    }}
  >
    <div slot="header">
      <div>
        <strong>HIT DETAILS</strong>
      </div>
    </div>
    <div class="break-space">
      ${this.selecteHitDetailsRow.hitDetail
        ? window.atob(this.selecteHitDetailsRow?.hitDetail)
        : ''}
    </div>
    <div slot="footer" 2lass="d-flex">
      <sc-button
        icon="download"
        icon-position="left"
        fill
        ?disabled=${false}
        class="ms-1"
      >Export</sc-button>
      <sc-button
        class="ms-auto"
        @click=${() => {
          this.openEditForm = true;
          this.openHitDetails = false;
        }}
      >Cancel</sc-button>
    </div>
  </sc-modal>`;
}



dataViewFormatter = (data, config) => {
    return config.map(({ label, key }) => ({
        field: {
            value: label,
        },
        value: {
            value: data[key] || '-',
        },
    }));
};

tableDataFormatter = (data, arrKey) => 
    data.reduce((formatted, { [arrKey]: arrayData, ...rest }) => {
        const data = arrayData.map(arrData => {
            return { ...rest, ...arrData };
        });
        formatted.push(...data);
        return formatted;
    }, []);

actionHandler = ({ detail }) => {
    const { rowData, actionName } = detail;
    if (actionName === 'cellClicked') {
        const { selectedData } = rowData;
        this.gqlModalCont.run();
        this.selectedRow = selectedData[0].data;
        this.openEditForm = true;
    }
    console.log(rowData, actionName);
};

actionHitDetailHandler = ({ detail }) => {
    const { rowData, actionName } = detail;
    if (actionName === 'cellClicked') {
        const { selectedData } = rowData;
        this.selectHitDetailsRow = selectedData[0].data;
        this.openHitDetails = true;
        this.openEditForm = false;
    }
    console.log(rowData, actionName);
};
actionEnabler = ({ detail }) => {
    const { factorScore, riskVariableRating, callback } = detail;

    if (callback) {
        callback({
            releaseTask: factorScore > 0,
            assign: riskVariableRating !== 'LOW',
        });
    }
};

renderScreen = data => {
    const { data: gnsData, totalCount } = data;
    return html`${gnsData.length
        ? html`
            <clmt-table
                .columnsConfig=${riskFactorConfig}
                .data=${gnsData}
                totalCount=${totalCount}
                @actionHandler=${this.actionHandler}
                @actionEnabler=${this.actionEnabler}
            ></clmt-table>
        `
        : null}`;
};

renderTable = () => {
    return this.gnsCont.render({
        complete: data => this.renderScreen(data),
    });
};

firstUpdated() {
    this.gnsCont.run();
}
