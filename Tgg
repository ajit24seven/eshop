import { LitElement, html, css } from 'lit';
import { customElement, property } from 'lit/decorators.js';

@customElement('kyk-alert-notification')
export class AlertNotification extends LitElement {
  static styles = css`
    :host {
      display: block;
    }
  `;

  @property({ attribute: false })
  notification;

  @property({ attribute: false })
  onClose: (key: any, isClosedByUser?: boolean) => void;

  @property({ attribute: false })
  onRemove: (key: string, isClosedByUser?: boolean) => void;

  firstUpdated() {
    document.addEventListener('click', this._handleOutsideClick.bind(this));
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    document.removeEventListener('click', this._handleOutsideClick.bind(this));
  }

  _handleOutsideClick(event) {
    const toast = this.shadowRoot.querySelector('sc-toast');
    if (toast && !toast.contains(event.target)) {
      this._closeNotification();
    }
  }

  _closeNotification() {
    const { key } = this.notification || {};
    if (key) {
      this.onRemove(key, true); // Call onRemove with `isClosedByUser` set to true
    }
  }

  render() {
    const { key, message, type, duration, closable, title, open } = this.notification || {};

    return html`
      <sc-toast
        .key=${key}
        .open=${open}
        .type=${type || 'success'}
        placement="right_top"
        .duration=${duration || 3000}
        ?closable=${closable || false}
        @sc-after-hide=${() => this.onhide(key)}
        .title=${title || ''}
      >
        <div style="display: flex; justify-content: space-between; gap: 5px; align-items: center;">
          ${message}
        </div>
      </sc-toast>
    `;
  }

  onhide(key = '') {
    this.onRemove(key);
  }
}
