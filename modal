import { LitElement, html, css, property } from 'lit';
import { customElement } from 'lit/decorators.js';

@customElement('my-modal')
export class MyModal extends LitElement {
  @property({ type: String }) id = '';
  @property({ type: Boolean, reflect: true }) opened = false;
  @property({ type: String }) title = '';
  @property({ type: String }) size = 'md';
  @property({ type: Object }) content = html``;
  @property({ type: Object }) footer = html``;

  static styles = css`
    :host {
      display: block;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      align-items: center;
      justify-content: center;
      display: none;
    }
    :host([opened]) {
      display: flex;
    }
    .modal {
      background: white;
      padding: 16px;
      border-radius: 8px;
      max-width: 500px;
      width: 100%;
    }
    .modal-header, .modal-footer {
      padding: 8px 0;
    }
  `;

  render() {
    return html`
      <div class="modal">
        <div class="modal-header">
          <h2>${this.title}</h2>
        </div>
        <div class="modal-content">
          ${this.content}
        </div>
        <div class="modal-footer">
          ${this.footer}
        </div>
      </div>
    `;
  }

  show({ id, title, size, content, footer }) {
    this.id = id;
    this.title = title;
    this.size = size;
    this.content = content;
    this.footer = footer;
    this.opened = true;
  }

  hide() {
    this.opened = false;
  }
}


// modal-manager.js
export class ModalManager {
  static modals = new Map();

  static register(modalElement) {
    ModalManager.modals.set(modalElement.id, modalElement);
  }

  static create(id) {
    const existingModal = ModalManager.modals.get(id);
    if (existingModal) {
      return existingModal;
    }

    const modal = document.createElement('my-modal');
    modal.id = id;
    ModalManager.register(modal);
    document.body.appendChild(modal);
    return modal;
  }

  static show({ id, title, size, content, footer }) {
    const modal = ModalManager.create(id);
    modal.show({ id, title, size, content, footer });
  }

  static hide(id) {
    const modal = ModalManager.modals.get(id);
    if (modal) {
      modal.hide();
    }
  }
}

============

import { html, css, LitElement } from 'lit';
import { customElement } from 'lit/decorators.js';
import './my-modal';
import { ModalManager } from './modal-manager.js';

@customElement('my-app')
export class MyApp extends LitElement {
  static styles = css`
    /* your styles here */
  `;

  render() {
    return html`
      <button @click=${this.showModal1}>Show Modal 1</button>
      <button @click=${this.showModal2}>Show Modal 2</button>
    `;
  }

  showModal1() {
    ModalManager.show({
      id: 'modal1',
      title: 'Modal 1',
      size: 'md',
      content: html`<div>Content for Modal 1</div>`,
      footer: html`<button @click=${() => ModalManager.hide('modal1')}>Close</button>`
    });
  }

  showModal2() {
    ModalManager.show({
      id: 'modal2',
      title: 'Modal 2',
      size: 'md',
      content: html`<div>Content for Modal 2</div>`,
      footer: html`<button @click=${() => ModalManager.hide('modal2')}>Close</button>`
    });
  }
}

===========================

import { LitElement, html, css, property } from 'lit-element';

class MyModal extends LitElement {
  @property({ type: Boolean, reflect: true })
  open = false;

  @property({ type: String })
  modalId = '';

  @property({ type: String })
  title = '';

  @property({ type: String })
  size = 'md';

  @property({ type: Object })
  content = html``;

  @property({ type: Object })
  footer = html``;

  static styles = css`
    :host([open]) .modal {
      display: block;
    }
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      align-items: center;
      justify-content: center;
    }
    .modal-content {
      background: white;
      padding: 20px;
      border-radius: 8px;
      width: var(--modal-size, 400px);
    }
    .modal-content.sm {
      --modal-size: 300px;
    }
    .modal-content.md {
      --modal-size: 400px;
    }
    .modal-content.lg {
      --modal-size: 600px;
    }
  `;

  render() {
    return html`
      <div class="modal" @click="${this._handleClickOutside}">
        <div class="modal-content ${this.size}">
          <h2>${this.title}</h2>
          <div class="modal-body">
            ${this.content}
          </div>
          <div class="modal-footer">
            ${this.footer}
          </div>
        </div>
      </div>
    `;
  }

  _handleClickOutside(e) {
    if (e.target === e.currentTarget) {
      this.open = false;
    }
  }
}

customElements.define('my-modal', MyModal);

=====

import { LitElement, html } from 'lit-element';

class ModalManager extends LitElement {
  static get properties() {
    return {
      modals: { type: Array }
    };
  }

  constructor() {
    super();
    this.modals = [];
  }

  show({ id, title, size, content, footer }) {
    const modalIndex = this.modals.findIndex(modal => modal.id === id);

    if (modalIndex > -1) {
      this.modals[modalIndex] = { id, title, size, content, footer };
    } else {
      this.modals = [
        ...this.modals,
        { id, title, size, content, footer }
      ];
    }

    this.requestUpdate();
  }

  hide(id) {
    this.modals = this.modals.filter(modal => modal.id !== id);
    this.requestUpdate();
  }

  render() {
    return html`
      ${this.modals.map(modal => html`
        <my-modal
          .open="${true}"
          .modalId="${modal.id}"
          .title="${modal.title}"
          .size="${modal.size}"
          .content="${modal.content}"
          .footer="${modal.footer}"
          @close="${() => this.hide(modal.id)}">
        </my-modal>
      `)}
    `;
  }
}

customElements.define('modal-manager', ModalManager);

===
import { LitElement, html } from 'lit-element';
import './modal-manager.js'; // Import the ModalManager component

class MyApp extends LitElement {
  render() {
    return html`
      <button @click="${this.openModal}">Open Modal</button>
      <modal-manager id="modalManager"></modal-manager>
    `;
  }

  openModal() {
    const modalManager = this.shadowRoot.getElementById('modalManager');
    modalManager.show({
      id: 'modal1',
      title: 'My Modal',
      size: 'md',
      content: html`<div>This is the modal content.</div>`,
      footer: html`<button @click="${() => modalManager.hide('modal1')}">OK</button>`
    });
  }
}

customElements.define('my-app', MyApp);


======================================

import { LitElement, html, css, property } from 'lit';
import { customElement } from 'lit/decorators.js';

@customElement('modal-component')
class ModalComponent extends LitElement {
  @property({ type: String }) id = '';
  @property({ type: String }) title = '';
  @property({ type: Boolean }) visible = false;
  @property({ type: String }) size = 'md'; // 'sm', 'md', 'lg'
  @property({ type: Object }) content = html``;
  @property({ type: Object }) footer = html``;

  static styles = css`
    .modal {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      background: rgba(0, 0, 0, 0.5);
      transition: opacity 0.3s ease;
      z-index: 1000;
      opacity: 0;
      pointer-events: none;
    }
    .modal.show {
      opacity: 1;
      pointer-events: auto;
    }
    .modal-content {
      background: white;
      padding: 1em;
      border-radius: 0.5em;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      max-width: 90vw;
      max-height: 80vh;
      overflow: auto;
      transition: transform 0.3s ease;
      transform: translateY(-20px);
    }
    .modal.show .modal-content {
      transform: translateY(0);
    }
    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .modal-footer {
      margin-top: 1em;
      display: flex;
      justify-content: flex-end;
    }
    .close-button {
      cursor: pointer;
      background: transparent;
      border: none;
      font-size: 1.5em;
    }
  `;

  render() {
    return html`
      <div class="modal ${this.visible ? 'show' : ''}">
        <div class="modal-content">
          <div class="modal-header">
            <span>${this.title}</span>
            <button class="close-button" @click="${this._close}">&times;</button>
          </div>
          <div class="modal-body">
            ${this.content}
          </div>
          <div class="modal-footer">
            ${this.footer}
          </div>
        </div>
      </div>
    `;
  }

  _close() {
    this.visible = false;
    this.dispatchEvent(new CustomEvent('modal-closed', { detail: { id: this.id } }));
  }
}

======

import { LitElement, html, css, property } from 'lit';
import { customElement } from 'lit/decorators.js';

@customElement('modal-manager')
class ModalManager extends LitElement {
  @property({ type: Array }) modals = [];

  static instance = null; // Singleton instance

  constructor() {
    super();
    if (ModalManager.instance) {
      return ModalManager.instance;
    }
    ModalManager.instance = this;
  }

  static show(options) {
    if (ModalManager.instance) {
      ModalManager.instance._show(options);
    }
  }

  static hide(id) {
    if (ModalManager.instance) {
      ModalManager.instance._hide(id);
    }
  }

  _show({ id, title, size = 'md', content = html``, footer = html`` }) {
    const existingModal = this.modals.find(modal => modal.id === id);
    if (existingModal) {
      Object.assign(existingModal, { title, size, content, footer, visible: true });
    } else {
      this.modals = [...this.modals, { id, title, size, content, footer, visible: true }];
    }
    this.requestUpdate();
  }

  _hide(id) {
    this.modals = this.modals.map(modal =>
      modal.id === id ? { ...modal, visible: false } : modal
    ).filter(modal => modal.visible);
    this.requestUpdate();
  }

  handleModalClose(event) {
    const { id } = event.detail;
    this._hide(id);
  }

  render() {
    return html`
      ${this.modals.map(modal => html`
        <modal-component
          .id="${modal.id}"
          .title="${modal.title}"
          .size="${modal.size}"
          .content="${modal.content}"
          .footer="${modal.footer}"
          .visible="${modal.visible}"
          @modal-closed="${this.handleModalClose}"
        ></modal-component>
      `)}
    `;
  }
}

====

import { LitElement, html } from 'lit';
import { customElement } from 'lit/decorators.js';
import './modal-component.js';
import './modal-manager.js';

@customElement('my-app')
class MyApp extends LitElement {
  render() {
    return html`
      <modal-manager></modal-manager>
      <button @click="${this.openModal}">Open Modal</button>
    `;
  }

  openModal() {
    ModalManager.show({
      id: 'modal1',
      title: 'Dynamic Modal',
      size: 'md',
      content: html`<div>Dynamic content here</div>`,
      footer: html`<div><button @click="${this.closeModal}">OK</button></div>`
    });
  }

  closeModal() {
    ModalManager.hide('modal1');
  }
}



================================

import { LitElement, html, css } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { createContext } from 'lit/directives/context.js';

export const ModalContext = createContext();

@customElement('modal-context-provider')
class ModalContextProvider extends LitElement {
  @property({ type: Array }) modals = [];

  static styles = css`
    /* Add styles if needed */
  `;

  // Methods to show and hide modals
  show({ id, title, size = 'md', content = html``, footer = html`` }) {
    const existingModal = this.modals.find(modal => modal.id === id);
    if (existingModal) {
      Object.assign(existingModal, { title, size, content, footer, visible: true });
    } else {
      this.modals = [...this.modals, { id, title, size, content, footer, visible: true }];
    }
    this.requestUpdate();
  }

  hide(id) {
    this.modals = this.modals.map(modal =>
      modal.id === id ? { ...modal, visible: false } : modal
    ).filter(modal => modal.visible);
    this.requestUpdate();
  }

  render() {
    return html`
      <modal-context.Provider value="${this}">
        <slot></slot>
        ${this.modals.map(modal => html`
          <modal-component
            .id="${modal.id}"
            .title="${modal.title}"
            .size="${modal.size}"
            .content="${modal.content}"
            .footer="${modal.footer}"
            .visible="${modal.visible}"
            @modal-closed="${() => this.hide(modal.id)}"
          ></modal-component>
        `)}
      </modal-context.Provider>
    `;
  }
}

======
import { LitElement, html, css, property } from 'lit';
import { customElement } from 'lit/decorators.js';

@customElement('modal-component')
class ModalComponent extends LitElement {
  @property({ type: String }) id = '';
  @property({ type: String }) title = '';
  @property({ type: Boolean }) visible = false;
  @property({ type: String }) size = 'md'; // 'sm', 'md', 'lg'
  @property({ type: Object }) content = html``;
  @property({ type: Object }) footer = html``;

  static styles = css`
    /* Basic styles for modal */
    .modal {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      background: rgba(0, 0, 0, 0.5);
      transition: opacity 0.3s ease;
      z-index: 1000;
      opacity: 0;
      pointer-events: none;
    }
    .modal.show {
      opacity: 1;
      pointer-events: auto;
    }
    .modal-content {
      background: white;
      padding: 1em;
      border-radius: 0.5em;
      max-width: 90vw;
      max-height: 80vh;
      overflow: auto;
      transition: transform 0.3s ease;
      transform: translateY(-20px);
    }
    .modal.show .modal-content {
      transform: translateY(0);
    }
    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .modal-footer {
      margin-top: 1em;
      display: flex;
      justify-content: flex-end;
    }
    .close-button {
      cursor: pointer;
      background: transparent;
      border: none;
      font-size: 1.5em;
    }
  `;

  render() {
    return html`
      <div class="modal ${this.visible ? 'show' : ''}">
        <div class="modal-content">
          <div class="modal-header">
            <span>${this.title}</span>
            <button class="close-button" @click="${this._close}">&times;</button>
          </div>
          <div class="modal-body">
            ${this.content}
          </div>
          <div class="modal-footer">
            ${this.footer}
          </div>
        </div>
      </div>
    `;
  }

  _close() {
    this.dispatchEvent(new CustomEvent('modal-closed', { detail: { id: this.id } }));
  }
}

=======

import { LitElement, html } from 'lit';
import { customElement } from 'lit/decorators.js';
import './modal-component.js';
import './modal-context-provider.js';

@customElement('my-app')
class MyApp extends LitElement {
  render() {
    return html`
      <modal-context-provider>
        <button @click="${this.openModal}">Open Modal</button>
      </modal-context-provider>
    `;
  }

  openModal() {
    const modalContext = this.renderRoot.querySelector('modal-context-provider');
    modalContext.show({
      id: 'modal1',
      title: 'Dynamic Modal',
      size: 'md',
      content: html`<div>Dynamic content here</div>`,
      footer: html`<div><button @click="${this.closeModal}">OK</button></div>`
    });
  }

  closeModal() {
    const modalContext = this.renderRoot.querySelector('modal-context-provider');
    modalContext.hide('modal1');
  }
}



